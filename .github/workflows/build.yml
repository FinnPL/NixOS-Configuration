name: "Build NixOS Configuration"

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  check:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Nix
      uses: cachix/install-nix-action@v25
      with:
        github_access_token: ${{ secrets.GITHUB_TOKEN }}
        extra_nix_config: |
          experimental-features = nix-command flakes
          access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}

    - name: Setup Cachix
      uses: cachix/cachix-action@v14
      with:
        name: hyprland
        authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
        skipPush: true

    - name: Check flake
      run: nix flake check --verbose

  evaluate:
    runs-on: ubuntu-latest
    needs: check
    strategy:
      matrix:
        host: [centaur]
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Nix
      uses: cachix/install-nix-action@v25
      with:
        github_access_token: ${{ secrets.GITHUB_TOKEN }}
        extra_nix_config: |
          experimental-features = nix-command flakes
          access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}

    - name: Setup Cachix
      uses: cachix/cachix-action@v14
      with:
        name: hyprland
        authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
        skipPush: true

    - name: Evaluate NixOS configuration for ${{ matrix.host }}
      run: |
        echo "ÔøΩ Evaluating NixOS configuration..."
        
        # Evaluate the full system configuration to ensure it's valid
        echo "üìã Evaluating system configuration..."
        nix eval .#nixosConfigurations.${{ matrix.host }}.config.system.build.toplevel.drvPath \
          --verbose \
          --show-trace

        echo "üîç Checking kernel configuration..."
        nix eval .#nixosConfigurations.${{ matrix.host }}.config.boot.kernelPackages.kernel.version \
          --raw
        
        echo ""
        echo "üì¶ Checking system packages..."
        nix eval .#nixosConfigurations.${{ matrix.host }}.config.environment.systemPackages \
          --apply "pkgs: builtins.toString (builtins.length pkgs)" \
          --raw
        echo " packages configured"

        echo "‚úÖ Configuration evaluation completed successfully!"

    - name: Evaluate Home Manager configuration for ${{ matrix.host }}
      run: |
        echo "üè† Evaluating Home Manager configuration..."
        # Try to evaluate Home Manager if it exists
        if nix eval .#nixosConfigurations.${{ matrix.host }}.config.home-manager.users --apply "users: builtins.attrNames users" 2>/dev/null; then
          echo "‚úÖ Home Manager configuration found and valid"
        else
          echo "‚ÑπÔ∏è  No Home Manager configuration found or not configured"
        fi
      continue-on-error: true

  format-check:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Nix
      uses: cachix/install-nix-action@v25
      with:
        github_access_token: ${{ secrets.GITHUB_TOKEN }}
        extra_nix_config: |
          experimental-features = nix-command flakes

    - name: Check Nix formatting with alejandra
      run: |
        nix fmt -- --check .

  security-check:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Nix
      uses: cachix/install-nix-action@v25
      with:
        github_access_token: ${{ secrets.GITHUB_TOKEN }}
        extra_nix_config: |
          experimental-features = nix-command flakes

    - name: Check for known vulnerabilities
      run: |
        echo "Checking for common security issues..."
        
        # Check for hardcoded secrets or passwords
        echo "Scanning for potential secrets..."
        if grep -r -i "password\|secret\|key" --include="*.nix" . | grep -v "# " | grep -v "//" | head -10; then
          echo "‚ö†Ô∏è  Found potential secrets - please review above lines"
        else
          echo "‚úÖ No obvious secrets found"
        fi
        
        # Check for insecure package versions (if any)
        echo "Checking for security-related configurations..."
        if grep -r "allowUnfree\|allowBroken\|allowInsecure" --include="*.nix" .; then
          echo "‚ö†Ô∏è  Found security-relaxing options - please review"
        else
          echo "‚úÖ No security-relaxing options found"
        fi
        
        echo "Basic security check completed!"
      continue-on-error: true
