name: "Build NixOS Configuration"

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  check:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Nix
      uses: cachix/install-nix-action@v25
      with:
        github_access_token: ${{ secrets.GITHUB_TOKEN }}
        extra_nix_config: |
          experimental-features = nix-command flakes
          access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}

    - name: Setup Cachix
      uses: cachix/cachix-action@v14
      with:
        name: hyprland
        authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
        skipPush: true

    - name: Check flake
      run: nix flake check --verbose

  build:
    runs-on: ubuntu-latest
    needs: check
    strategy:
      matrix:
        host: [centaur]
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Nix
      uses: cachix/install-nix-action@v25
      with:
        github_access_token: ${{ secrets.GITHUB_TOKEN }}
        extra_nix_config: |
          experimental-features = nix-command flakes
          access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}

    - name: Setup Cachix
      uses: cachix/cachix-action@v14
      with:
        name: hyprland
        authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
        skipPush: true

    - name: Update flake inputs (to resolve version conflicts)
      run: |
        echo "üì¶ Updating flake lock to ensure version compatibility..."
        nix flake update --verbose
      continue-on-error: true

    - name: Build NixOS configuration for ${{ matrix.host }}
      run: |
        echo "üîß Attempting to build NixOS configuration..."
        
        # First, try updating flake inputs to resolve potential version conflicts
        echo "üì¶ Updating flake lock file..."
        nix flake update --verbose || echo "‚ö†Ô∏è Flake update failed, continuing with existing lock"
        
        # Clear any problematic cached builds
        echo "üßπ Clearing build cache..."
        nix-collect-garbage || echo "‚ö†Ô∏è Garbage collection failed, continuing"
        
        # Try building with extra debugging and fallback options
        echo "üèóÔ∏è Building NixOS system..."
        nix build .#nixosConfigurations.${{ matrix.host }}.config.system.build.toplevel \
          --verbose \
          --show-trace \
          --fallback \
          --refresh \
          --no-link \
          --option narinfo-cache-negative-ttl 0 \
          || {
            echo "‚ùå First build attempt failed, trying alternative approach..."
            
            # Try with different substituters
            echo "üîÑ Retrying with minimal substituters..."
            nix build .#nixosConfigurations.${{ matrix.host }}.config.system.build.toplevel \
              --verbose \
              --show-trace \
              --fallback \
              --no-link \
              --option substituters "https://cache.nixos.org" \
              --option trusted-public-keys "cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY=" \
              || {
                echo "üí• Build failed completely. Checking system info..."
                echo "Nix version: $(nix --version)"
                echo "Available store paths: $(find /nix/store -name "*linux*" -type d | head -5 || echo 'No Linux paths found')"
                exit 1
              }
          }

    - name: Build Home Manager configuration for ${{ matrix.host }}
      run: |
        nix build .#nixosConfigurations.${{ matrix.host }}.config.home-manager.users.*.home.activationPackage \
          --verbose \
          --show-trace \
          --fallback \
          --keep-going || echo "Home Manager build failed or not configured"

  format-check:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Nix
      uses: cachix/install-nix-action@v25
      with:
        github_access_token: ${{ secrets.GITHUB_TOKEN }}
        extra_nix_config: |
          experimental-features = nix-command flakes

    - name: Check Nix formatting with alejandra
      run: |
        nix fmt -- --check .

  security-check:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Nix
      uses: cachix/install-nix-action@v25
      with:
        github_access_token: ${{ secrets.GITHUB_TOKEN }}
        extra_nix_config: |
          experimental-features = nix-command flakes

    - name: Check for known vulnerabilities
      run: |
        echo "Checking for common security issues..."
        
        # Check for hardcoded secrets or passwords
        echo "Scanning for potential secrets..."
        if grep -r -i "password\|secret\|key" --include="*.nix" . | grep -v "# " | grep -v "//" | head -10; then
          echo "‚ö†Ô∏è  Found potential secrets - please review above lines"
        else
          echo "‚úÖ No obvious secrets found"
        fi
        
        # Check for insecure package versions (if any)
        echo "Checking for security-related configurations..."
        if grep -r "allowUnfree\|allowBroken\|allowInsecure" --include="*.nix" .; then
          echo "‚ö†Ô∏è  Found security-relaxing options - please review"
        else
          echo "‚úÖ No security-relaxing options found"
        fi
        
        echo "Basic security check completed!"
      continue-on-error: true
