name: "Build NixOS Configuration"

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  check:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Nix
      uses: cachix/install-nix-action@v25
      with:
        github_access_token: ${{ secrets.GITHUB_TOKEN }}
        extra_nix_config: |
          experimental-features = nix-command flakes
          access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}

    - name: Setup Cachix
      uses: cachix/cachix-action@v14
      with:
        name: hyprland
        authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
        skipPush: true

    - name: Check flake
      run: nix flake check --verbose

  build:
    runs-on: ubuntu-latest
    needs: check
    strategy:
      matrix:
        host: [centaur]
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Nix
      uses: cachix/install-nix-action@v25
      with:
        github_access_token: ${{ secrets.GITHUB_TOKEN }}
        extra_nix_config: |
          experimental-features = nix-command flakes
          access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}

    - name: Setup Cachix
      uses: cachix/cachix-action@v14
      with:
        name: hyprland
        authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
        skipPush: true

    - name: Update flake inputs (to resolve version conflicts)
      run: |
        echo "üì¶ Updating flake lock to ensure version compatibility..."
        nix flake update --verbose
      continue-on-error: true

    - name: Build NixOS configuration for ${{ matrix.host }}
      run: |
        echo "üîß Attempting to build NixOS configuration..."
        
        # Create log directory for organized output
        mkdir -p build-logs
        
        # First, try updating flake inputs to resolve potential version conflicts
        echo "üì¶ Updating flake lock file..."
        nix flake update --verbose 2>&1 | head -50 || echo "‚ö†Ô∏è Flake update failed, continuing with existing lock"
        
        # Clear any problematic cached builds
        echo "üßπ Clearing build cache..."
        nix-collect-garbage 2>&1 | head -20 || echo "‚ö†Ô∏è Garbage collection failed, continuing"
        
        # Check for kernel-related issues first
        echo "üîç Checking kernel configuration..."
        nix eval .#nixosConfigurations.${{ matrix.host }}.config.boot.kernelPackages.kernel.version 2>&1 | head -5 || echo "‚ö†Ô∏è Could not determine kernel version"
        
        # Try a dry run first to identify issues without building
        echo "üîç Performing dry run to identify potential issues..."
        if ! nix build .#nixosConfigurations.${{ matrix.host }}.config.system.build.toplevel --dry-run --verbose 2>&1 | tee build-logs/dry-run.log; then
          echo "‚ùå Dry run failed. Last 30 lines of dry run output:"
          tail -30 build-logs/dry-run.log
          echo "üí° Trying to identify specific failing components..."
          
          # Try to build just the kernel to isolate the issue
          echo "üîç Testing kernel build specifically..."
          nix build .#nixosConfigurations.${{ matrix.host }}.config.boot.kernelPackages.kernel --dry-run 2>&1 | head -20 || echo "‚ùå Kernel dry-run failed"
          
          echo "‚ùå Dry run failed, proceeding with fallback strategies..."
        fi
        
        # Try building with limited output and error focus
        echo "üèóÔ∏è Building NixOS system (with truncated logs)..."
        if ! timeout 20m nix build .#nixosConfigurations.${{ matrix.host }}.config.system.build.toplevel \
          --verbose \
          --show-trace \
          --fallback \
          --refresh \
          --no-link \
          --option narinfo-cache-negative-ttl 0 \
          --option build-fallback true \
          --option keep-going true \
          2>&1 | tee build-logs/main-build.log; then
          
          echo "‚ùå First build attempt failed. Analyzing error..."
          
          # Show only the most relevant error information
          echo "ÔøΩ Last 50 lines of build output:"
          tail -50 build-logs/main-build.log
          
          echo "üîç Searching for specific error patterns:"
          grep -i "error\|failed\|not found\|missing" build-logs/main-build.log | tail -10 || echo "No specific errors found in patterns"
          
          echo "üîç Checking for store path issues:"
          grep -i "store.*not.*nix\|path.*not.*store" build-logs/main-build.log | tail -5 || echo "No store path errors found"
          
          # Try alternative build strategy
          echo "üîÑ Trying alternative build approach..."
          if ! timeout 15m nix build .#nixosConfigurations.${{ matrix.host }}.config.system.build.toplevel \
            --verbose \
            --show-trace \
            --fallback \
            --no-link \
            --rebuild \
            --option substituters "https://cache.nixos.org https://hyprland.cachix.org" \
            --option trusted-public-keys "cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY= hyprland.cachix.org-1:a7pgxzMz7+chwVL3/pzj6jIBMioiJM7ypFP8PwtkuGc=" \
            2>&1 | tee build-logs/fallback-build.log; then
            
            echo "üí• All build attempts failed. Compact error summary:"
            echo "Nix version: $(nix --version)"
            echo "System: $(uname -a)"
            
            echo "üîç Final error analysis:"
            tail -20 build-logs/fallback-build.log
            
            echo "üîç Store diagnostics (limited):"
            find /nix/store -name "*linux*" -type d 2>/dev/null | head -5 || echo 'No Linux paths found'
            find /nix/store -name "*modules*" -type d 2>/dev/null | head -3 || echo 'No module paths found'
            
            echo "‚ùå Build failed after all recovery attempts."
            exit 1
          else
            echo "‚úÖ Fallback build succeeded!"
          fi
        else
          echo "‚úÖ Main build succeeded!"
        fi

    - name: Build Home Manager configuration for ${{ matrix.host }}
      run: |
        nix build .#nixosConfigurations.${{ matrix.host }}.config.home-manager.users.*.home.activationPackage \
          --verbose \
          --show-trace \
          --fallback \
          --keep-going || echo "Home Manager build failed or not configured"

  format-check:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Nix
      uses: cachix/install-nix-action@v25
      with:
        github_access_token: ${{ secrets.GITHUB_TOKEN }}
        extra_nix_config: |
          experimental-features = nix-command flakes

    - name: Check Nix formatting with alejandra
      run: |
        nix fmt -- --check .

  security-check:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Nix
      uses: cachix/install-nix-action@v25
      with:
        github_access_token: ${{ secrets.GITHUB_TOKEN }}
        extra_nix_config: |
          experimental-features = nix-command flakes

    - name: Check for known vulnerabilities
      run: |
        echo "Checking for common security issues..."
        
        # Check for hardcoded secrets or passwords
        echo "Scanning for potential secrets..."
        if grep -r -i "password\|secret\|key" --include="*.nix" . | grep -v "# " | grep -v "//" | head -10; then
          echo "‚ö†Ô∏è  Found potential secrets - please review above lines"
        else
          echo "‚úÖ No obvious secrets found"
        fi
        
        # Check for insecure package versions (if any)
        echo "Checking for security-related configurations..."
        if grep -r "allowUnfree\|allowBroken\|allowInsecure" --include="*.nix" .; then
          echo "‚ö†Ô∏è  Found security-relaxing options - please review"
        else
          echo "‚úÖ No security-relaxing options found"
        fi
        
        echo "Basic security check completed!"
      continue-on-error: true
